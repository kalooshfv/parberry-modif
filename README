Procedural Terrain Generation Project

# CONTENTS
  
  1. Data
  2. Segment
  3. Analyze
  4. Generate
  5. Segmentation

1. Data

  This folder is supposed to contain the input DEM files. We provide two example 
  DEM files, namely `bryce_canyon_input.asc` and `kings_canyon_input.asc`. 
  Some sources to obtain such files include the United States Geological Survey
  (USGS) and ELVIS (Elevation Information System).

2. Segment

  This folder contains the source code for the segmentation algorithm 
  implementation. It uses Python's `skimage` package to do the segmentation. 
  After it identifies the segments, each segment is resized in order to be able 
  to generate infinite terrain. Then, the segments will be exported into data 
  in multiple csv files.

3. Analyze

  This folder contains the source code that analyzes each segment's csv file. 
  It will generate a height distribution function for each segment that will be 
  used in the next stage.

4. Generate

  This folder contains the source code for the noise functions used in the
  algorithm. `valuenoise.cpp` contains the fractal brownian implementation and 
  the value noise algorithm, and `simplexnoise.cpp` is called upon in 
  `valuenoise.cpp`. Overall, the noise algorithms are called in `main.cpp`, 
  which produces a DEM file for each segment.

5. Finalize

  This folder contains source code to merge all DEM files together. It employs
  a Gaussian blur smoothing function to ensure that segments merge together
  naturally. The smoothing function can be deactivated if one wishes to do so.

6. Evaluate
  This folder contains the various implementations of similarity metrics we
  use. A Jupyter file can be used to evaluate all the similarity metrics at
  once. To do so, modify the two terrain file names in the second cell, and run
  the program.

# HOW TO RUN

This program is only compatible for Windows.

## Install dependencies
1. Install C++
2. Install Conda
3. Prepare Conda environmnt using `setup_conda_env.ps1`

## Run the program
1. Adjust parameters in `runner.ps1`
2. Run `./runner.ps1`
3. Evaluate the similarity of two DEM files using `similarity.py` 
